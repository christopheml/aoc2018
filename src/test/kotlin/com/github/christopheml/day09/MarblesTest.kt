package com.github.christopheml.day09

import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class MarblesTest {

    @Test
    internal fun insertion_test() {
        val expected = listOf(
            "(0)",
            "0 (1)",
            "0 (2) 1",
            "0 2 1 (3)",
            "0 (4) 2 1 3",
            "0 4 2 (5) 1 3",
            "0 4 2 5 1 (6) 3",
            "0 4 2 5 1 6 3 (7)",
            "0 (8) 4 2 5 1 6 3 7",
            "0 8 4 (9) 2 5 1 6 3 7",
            "0 8 4 9 2 (10) 5 1 6 3 7",
            "0 8 4 9 2 10 5 (11) 1 6 3 7",
            "0 8 4 9 2 10 5 11 1 (12) 6 3 7",
            "0 8 4 9 2 10 5 11 1 12 6 (13) 3 7",
            "0 8 4 9 2 10 5 11 1 12 6 13 3 (14) 7",
            "0 8 4 9 2 10 5 11 1 12 6 13 3 14 7 (15)",
            "0 (16) 8 4 9 2 10 5 11 1 12 6 13 3 14 7 15",
            "0 16 8 (17) 4 9 2 10 5 11 1 12 6 13 3 14 7 15",
            "0 16 8 17 4 (18) 9 2 10 5 11 1 12 6 13 3 14 7 15",
            "0 16 8 17 4 18 9 (19) 2 10 5 11 1 12 6 13 3 14 7 15",
            "0 16 8 17 4 18 9 19 2 (20) 10 5 11 1 12 6 13 3 14 7 15",
            "0 16 8 17 4 18 9 19 2 20 10 (21) 5 11 1 12 6 13 3 14 7 15",
            "0 16 8 17 4 18 9 19 2 20 10 21 5 (22) 11 1 12 6 13 3 14 7 15",
            "0 16 8 17 4 18 (19) 2 20 10 21 5 22 11 1 12 6 13 3 14 7 15",
            "0 16 8 17 4 18 19 2 (24) 20 10 21 5 22 11 1 12 6 13 3 14 7 15",
            "0 16 8 17 4 18 19 2 24 20 (25) 10 21 5 22 11 1 12 6 13 3 14 7 15"
        )

        val marbles = Marbles(13)
        for (i in 0 until expected.size) {
            assertThat(marbles.representation()).isEqualTo(expected[i]).`as`("Turn $i")
            marbles.play()
        }
    }

}
